# -*- coding:utf-8 -*-  
__author__ = 'Mr.Lin'
__date__ = '2019/11/17 16:10'



"""
函数参数为引用
"""

"""
Python 唯一支持的参数传递模式是共享传参（call by sharing）。多数面向对象语言都采用
这一模式，包括 Ruby、Smalltalk 和 Java（Java 的引用类型是这样，基本类型按值传
参）。
共享传参指函数的各个形式参数获得实参中各个引用的副本。也就是说，函数内部的形参
是实参的别名。
这种方案的结果是，函数可能会修改作为参数传入的可变对象，但是无法修改那些对象的
标识（即不能把一个对象替换成另一个对象）。示例 8-11 中有个简单的函数，它在参数
上调用 += 运算符。分别把数字、列表和元组传给那个函数，实际传入的实参会以不同的
方式受到影响。
"""
def func(a,b):
    a += b
    return a
x = 1
y = 1
print(func(x,y))
# >>> 2
print("")
print(x,y)
# >>>
# 1 1
# x y 没有发生变化
print("")
a = [1,2]
b = [3,4]

print(func(a,b))
print("")
# >>>
# [1, 2, 3, 4]

print(a,b)
# >>>
# [1, 2, 3, 4] [3, 4]
# a变了 b没变

t = (1,2)
u = (3,4)

print("")
print(func(t,u))
# >>>
# (1, 2, 3, 4)
print("")
print(t,u)
# >>>
# (1, 2) (3, 4)

# t,u没变


















